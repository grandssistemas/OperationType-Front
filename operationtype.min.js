angular.module("operationtype.templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("baseOperationType.html","<div class=\"gumga-layout\"><header class=\"gl-header\" ng-controller=\"MenuController\"><div class=\"searchbar\"><div class=\"icon back\"><button type=\"button\" data-ng-click=\"toggleSearch()\"><i class=\"material-icons\">arrow_back</i></button></div><div class=\"query\"><input type=\"text\" class=\"form-control\" placeholder=\"Pesquisar...\"></div><div class=\"icon search\"><button type=\"button\"><i class=\"material-icons\">search</i></button></div></div><nav class=\"navbar\"><div class=\"container-fluid\"><div class=\"navbar-header\"><a class=\"navbar-brand\" data-ng-click=\"navCollapse()\"><i class=\"material-icons\">menu</i></a><a class=\"navbar-brand\" data-ng-click=\"navCollapse()\"><img height=\"30\" width=\"110\" src=\"resources/images/mobi_logo_pq.png\" alt=\"\"></a><button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\" aria-expanded=\"false\"><i class=\"material-icons\">more_vert</i></button><button type=\"button\" class=\"navbar-toggle\" data-ng-click=\"toggleSearch()\"><i class=\"material-icons\">search</i></button></div><div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\"><ul class=\"nav navbar-nav organizations\" title=\"Trocar de Organização\"><li class=\"dropdown\"><a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"material-icons\">domain</i></a><ul class=\"dropdown-menu\"><li><div class=\"form-group\"><input type=\"text\" class=\"form-control gmd\" data-ng-model=\"org_search\" placeholder=\"Pesquisar...\"><div class=\"bar\"></div></div></li><li data-ng-repeat=\"org in organizations | filter: org_search\"><a href=\"\" ng-click=\"changeOrganization(org)\">{{org.name}}<span class=\"glyphicon glyphicon-ok\" ng-show=\"org.name == user.organization || org.name == user.name\"></span></a></li><li role=\"separator\" class=\"divider\"></li></ul></li></ul><form class=\"navbar-form navbar-left search hidden-sm hidden-xs\"><div class=\"form-group\"><div class=\"input-group\"><span class=\"input-group-addon\" id=\"basic-addon1\"><i class=\"material-icons\">search</i></span><input type=\"text\" ng-model=\"asyncSelected\" placeholder=\"Pesquisar...\" uib-typeahead=\"item.searchLabel for item in searchMenu($viewValue) | limitTo:10\" class=\"form-control\" typeahead-on-select=\"goToState($item)\"></div></div></form><ul class=\"nav navbar-nav navbar-right\"><li class=\"dropdown\"><a class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">{{user.name}}<span class=\"caret\"></span></a><div class=\"dropdown-menu\"><div class=\"row dropdown-account\"><div class=\"col-xs-4\"><img ng-src=\"{{user.profileImage}}\" alt=\"\"></div><div class=\"user-info\"><b>{{user.name}}</b><span>{{user.login}}</span></div></div><hr style=\"margin-bottom: 10px\"><div class=\"row\"><div class=\"col-xs-12 dropdown-account-footer\" style=\"padding:0 25px 10px 25px\"><button ui-sref=\"user.profile\" class=\"btn btn-primary raised gmd\">Minha conta</button><div class=\"pull-right\"><button type=\"button\" ng-click=\"logout()\" class=\"btn btn-default gmd\" name=\"button\">Sair</button></div></div></div></div></li></ul><ul class=\"nav navbar-nav navbar-right apps hidden-sm hidden-xs\"><li class=\"dropdown\"><a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"material-icons\">apps</i></a><ul class=\"dropdown-menu\" style=\"min-width: 95px !important\"><li class=\"apps-icons\"><table class=\"table\"><tr><td><a ng-click=\"openFinance()\"><img src=\"dist/grands/images/finance.png\" alt=\"\"><span class=\"text-bold text-uppercase\">Financeiro</span></a></td></tr></table></li></ul></li></ul></div></div></nav></header><main ui-view style=\"background-color: #f5f5f5\"></main><nav class=\"gl-nav\" ng-controller=\"MenuController\"><div class=\"navbar-header\"><a class=\"navbar-brand\" data-ng-click=\"navCollapse()\"><i class=\"material-icons\">menu</i></a><a class=\"navbar-brand\" data-ng-click=\"navCollapse()\"><img height=\"30\" width=\"110\" src=\"resources/images/mobi_logo_pq.png\" alt=\"\"></a></div><header><figure style=\"padding: 25% 3% 3% 3%\"><img style=\"max-height: 200px\" ng-src=\"{{companyLogo}}\" alt=\"\"></figure></header><gl-menu menu=\"menu\" keys=\"keys\" search=\"menuSearch\"></gl-menu></nav></div>");
$templateCache.put("modules/stock/views/form.html","<form name=\"forms\" novalidate><div class=\"row\"><div class=\"col-lg-6\"><div class=\"ibox float-e-margins\"><div class=\"ibox-title\"><h5><span gumga-translate-tag=\"stock.title\">Title</span></h5></div><div class=\"ibox-content\"><div class=\"row\"><div class=\"col-md-12\"><label gumga-translate-tag=\"stock.type\">Type</label></div><div class=\"col-md-12\"><div class=\"btn-group\" ng-init=\"typeAux = \'\'\"><button class=\"btn\" ng-click=\"typeAux = treePattern[2];objAux = {name:objAux.name,description:objAux.description}; focusName = true;createObject();\" ng-class=\"typeAux == treePattern[2]?\'btn-default\':\'btn-white\'\" type=\"button\"><span gumga-translate-tag=\"stock.typeofoperation\">Type of Operation</span></button></div></div><div class=\"col-md-12\"><label for=\"name\" gumga-translate-tag=\"stock.name\">name</label><input id=\"name\" type=\"text\" name=\"name\" ng-model=\"objAux.name\" class=\"form-control\" ng-disabled=\"typeAux == \'\'\"><div ng-if=\"typeAux == treePattern[1]\"><label for=\"descrition\" gumga-translate-tag=\"stock.descrition\">Descrition</label><input id=\"descrition\" type=\"text\" name=\"descrition\" ng-model=\"objAux.descrition\" class=\"form-control\"></div><div ng-if=\"typeAux == treePattern[2]\"><label gumga-translate-tag=\"stock.invoiceobjective\">Invoice Objective</label><select class=\"form-control\" ng-model=\"objAux.invoiceObjective\" ng-options=\"df.key as df.label for df in documentFinalityList\"></select></div><div ng-if=\"typeAux == treePattern[2]\"><label gumga-translate-tag=\"stock.operationcategory\">Operation Category</label><strong class=\"text-danger\">*</strong><select class=\"form-control\" ng-model=\"objAux.operationCategory\" ng-options=\"oc.key as oc.label for oc in operationCategoryList\"></select></div><div ng-if=\"typeAux == treePattern[2]\"><div class=\"row\"><div class=\"col-md-12 m-t\"><label for=\"descrition\" gumga-translate-tag=\"stock.message\">Message</label><textarea id=\"message\" name=\"message\" class=\"form-control\" ng-model=\"objAux.message\" style=\"resize: none; height: 100px\" maxlength=\"5000\" gumga-counter=\"5000\"></textarea></div></div></div><button class=\"btn btn-primary pull-right m-t button-add\" ng-click=\"objAux = addNew(objAux,typeAux)\" ng-disabled=\"typeAux == \'\' || objAux.name == null || objAux.name == \'\'\"><span class=\"fa fa-plus\"></span><span gumga-translate-tag=\"stock.add\">add</span></button></div></div></div></div></div></div><div class=\"row\"><div class=\"col-lg-12\"><div class=\"ibox float-e-margins\"><div class=\"ibox-title\"><h5><span gumga-translate-tag=\"stock.entranceandexit\">Entrance and Exit</span></h5></div><div class=\"ibox-content\"><div class=\"row\"><grands-category-tree list=\"array\" model-list=\"list\" pattern=\"treePattern\" charac-origin=\"OPERATION\" type-attribute=\"stockType\" get-childrens=\"getChildrens(id,type)\" update-entity=\"editOperation(data)\" enable-remove=\"removable(data)\" delete-functions=\"deleteFunctions\"></grands-category-tree></div></div></div></div></div><div class=\"pull-right\"><button type=\"button\" grands-button=\"return\" ui-sref=\"home.base\" ng-show=\"entity.id\"></button><button type=\"button\" grands-button=\"cancel\" ui-sref=\"home.base\" ng-hide=\"entity.id\"></button><button type=\"button\" grands-button=\"save\" ng-click=\"update(list)\" ng-disabled=\"forms.$invalid\"></button></div></form>");
$templateCache.put("modules/businessrule/views/form.html","<form name=\"forms\" novalidate><div class=\"row\"><div class=\"col-lg-12\"><div class=\"ibox float-e-margins\"><div class=\"ibox-content\"><div class=\"row\"><div class=\"col-md-12\"><label gumga-translate-tag=\"businessrule.typeofmovement\">Type of Movement</label><strong class=\"text-danger\" ng-show=\"entity.operationOwner.length <= 0\">*</strong><select multiple chosen data-placeholder=\"Tipo de movimento...\" ng-model=\"entity.operationOwner\" ng-options=\"op as op.name for op in operationTypes\" ng-disabled=\"entity.id\"></select></div></div><br><div class=\"row\"><div class=\"col-md-6\"><label gumga-translate-tag=\"businessrule.whenthevalueis\">When the value is</label></div><div class=\"col-md-2\"><label gumga-translate-tag=\"businessrule.duraction\">Duraction</label></div></div><div class=\"row\"><div class=\"col-md-2\"><select class=\"form-control\" ng-options=\"op.key as op.label for op in operators\" ng-model=\"entity.operatorType\" ng-disabled=\"entity.id\" ng-change=\"entity.value = 0\"></select></div><div class=\"col-md-2\"><input type=\"text\" class=\"form-control\" ng-model=\"entity.value\" ui-money-mask ng-disabled=\"!entity.operatorType || entity.operatorType == \' \' || entity.id\"></div><div class=\"col-md-2\"><gumga-date ng-model=\"entity.startDuraction\" id=\"startdate\" name=\"startdate\" configuration=\"configStartDate\"></gumga-date></div><div class=\"col-md-1\"><label gumga-translate-tag=\"businessrule.until\" class=\"custom-span text-muted\">Until</label></div><div class=\"col-md-2\"><gumga-date ng-model=\"entity.endDuraction\" id=\"enddate\" name=\"enddate\" configuration=\"configEndDate\"></gumga-date></div><div class=\"col-md-3\"><button type=\"button\" ng-click=\"clickedBtnGreen = true; clickedBtnBlue = false\" style=\"color: #fff\" class=\"btn button-green\" ng-disabled=\"entity.id\"><i class=\"fa fa-check\"></i><span gumga-translate-tag=\"billing.atsight\">At Sight</span></button><button type=\"button\" ng-click=\"clickedBtnGreen = false; clickedBtnBlue = true;changeTerm()\" style=\"color: #fff\" class=\"btn button-blue\" ng-disabled=\"entity.id\"><i class=\"fa fa-calendar-check-o\"></i><span>A Prazo</span></button></div></div></div></div></div></div><div class=\"row\" ng-show=\"clickedBtnBlue || clickedBtnGreen\"><div class=\"col-lg-12\"><div class=\"ibox float-e-margins\"><div class=\"ibox-content\"><div class=\"row\"><div class=\"col-md-6\"><h3 gumga-translate-tag=\"businessrule.entry\">Entry</h3></div><div class=\"col-md-6\"><h3 gumga-translate-tag=\"businessrule.discount\">Discount</h3></div></div><div class=\"row\"><div class=\"col-md-3\"><label gumga-translate-tag=\"businessrule.minimumvalueforentry\">Minimum value for entry</label><grands-control-type model=\"entity.entryValue\" type-value=\"entity.entryType\" is-disabled=\"clickedBtnGreen || entity.id\"></grands-control-type></div><div class=\"col-md-3\"><label gumga-translate-tag=\"businessrule.tobepaid\">to be paid</label><grands-payment-type color=\"btn-info\" is-disabled=\"entity.id\" selected-values=\"entity.entryPaymentTypes\" multi=\"true\" search=\"get(page,size)\" page-size=\"5\"></grands-payment-type></div><div class=\"col-md-3\"><label gumga-translate-tag=\"businessrule.maximumdiscount\">Maximum discount</label><grands-control-type model=\"entity.discount\" type-value=\"entity.discountType\" is-disabled=\"isDisabled || entity.id\"></grands-control-type></div></div><br><div class=\"row container-fluid\" ng-if=\"!hideInstallment()\"><h3 gumga-translate-tag=\"businessrule.installment\">Installment</h3></div><div class=\"row\" ng-if=\"!hideInstallment()\"><div class=\"col-md-2\"><label gumga-translate-tag=\"businessrule.maxinstallment\">Max Installment</label><strong class=\"text-danger\" ng-show=\"clickedBtnBlue && entity.parcelsCount == null || entity.parcelsCount == \'\' \">*</strong><input type=\"number\" class=\"form-control\" ng-model=\"entity.parcelsCount\" ng-change=\"minimumParcelsCount()\" ng-disabled=\"entity.id\"></div><div class=\"col-md-2\"><label gumga-translate-tag=\"businessrule.tobepaid\">to be paid</label><strong class=\"text-danger\" ng-show=\"entity.parcelsPaymentTypes.length <= 0\">*</strong><grands-payment-type is-disabled=\"entity.id\" color=\"btn-info\" selected-values=\"entity.parcelsPaymentTypes\" multi=\"true\" search=\"get(page,size)\" page-size=\"5\"></grands-payment-type></div><div class=\"col-md-offset-2 col-md-2\"><div class=\"row container-fluid\"><label gumga-translate-tag=\"businessrule.recurrence\">Recurrence</label></div><input type=\"checkbox\" ng-model=\"entity.recurrence.value\" ng-disabled=\"entity.id\"><span gumga-translate-tag=\"businessrule.monthly\">Monthly</span></div><div class=\"col-md-4\" ng-hide=\"disabledNegotiationInterval()\"><div class=\"row container-fluid\"><label gumga-translate-tag=\"businessrule.installmentsinterval\">Installments interval</label><strong class=\"text-danger\" ng-show=\"entity.recurrence.value == false && entity.negotiationInterval == \'\' \">*</strong></div><div class=\"row\"><div class=\"col-md-4\"><input type=\"number\" class=\"form-control\" ng-model=\"entity.negotiationInterval\" ng-change=\"minimumNegotiationInterval()\" ng-disabled=\"disabledNegotiationInterval() || entity.id\"></div><div class=\"col-md-1\"><label class=\"custom-label-days text-muted\" gumga-translate-tag=\"businessrule.days\">Days</label></div></div></div></div><br><div class=\"row container-fluid\"><div class=\"pull-right\"><button type=\"button\" class=\"btn btn-primary pull-right button-add\" ng-click=\"addRules(entity)\" ng-disabled=\"blockBtnAdd()\" ng-hide=\"entity.id\"><span><span class=\"fa fa-plus\"></span></span><span gumga-translate-tag=\"businessrule.add\" class=\"ng-scope\">Add</span></button><button type=\"button\" class=\"btn btn-primary pull-right button-ok\" ng-show=\"entity.id\" ng-click=\"saveOnEdit(entity)\" ng-disabled=\"!entity.entryValue || !entity.parcelsCount\"><span><span class=\"fa fa-check\"></span></span><span gumga-translate-tag=\"button.save\" class=\"ng-scope\">Save</span></button></div></div></div></div></div></div><div class=\"row\" ng-show=\"rules.length > 0 || !entity.id\"><div class=\"col-lg-12\"><div class=\"ibox float-e-margins\"><div class=\"ibox-content\"><div class=\"row\"><div class=\"table-responsive\"><gumga-list data=\"rules\" configuration=\"conf\" class=\"table-bordered\"></gumga-list></div></div></div></div></div></div><div class=\"pull-right\"><button type=\"button\" ui-sref=\"businessrule.list\" grands-button=\"return\" ng-show=\"entity.id\"></button><button type=\"button\" ui-sref=\"businessrule.list\" grands-button=\"cancel\" ng-hide=\"entity.id\"></button><button type=\"button\" ng-disabled=\"rules.length <= 0\" ng-click=\"update(rules)\" grands-button=\"save\"></button></div></form>");
$templateCache.put("modules/businessrule/views/list.html","<div class=\"row\"><div class=\"col-lg-12\"><div class=\"ibox float-e-margins\"><div class=\"ibox-content\"><div class=\"row\"><div class=\"col-md-12\"><div class=\"col-md-5\"><button type=\"button\" ui-sref=\"businessrule.insert\" grands-button=\"new\"></button></div><div class=\"col-md-7\"><gumga-query search=\"businessrule.methods.search(field, param)\" advanced-search=\"businessrule.methods.advancedSearch(param)\"><search-field field=\"name\" label=\"{{\'name\'|gumgaTranslate:\'businessrule\'}}\" select=\"true\"></search-field><search-field field=\"maximumdiscount\" label=\"{{\'maximumdiscount\'|gumgaTranslate:\'businessrule\'}}\"></search-field><search-field field=\"entryvalue\" label=\"{{\'entryvalue\'|gumgaTranslate:\'businessrule\'}}\"></search-field><search-field field=\"parcelscount\" label=\"{{\'parcelscount\'|gumgaTranslate:\'businessrule\'}}\"></search-field><search-field field=\"negotiationinterval\" label=\"{{\'negotiationinterval\'|gumgaTranslate:\'businessrule\'}}\"></search-field><advanced-search-field type=\"string\" label=\"{{\'maximumdiscount\'|gumgaTranslate:\'businessrule\'}}\" field=\"maximumdiscount\"></advanced-search-field><advanced-search-field type=\"string\" label=\"{{\'entryvalue\'|gumgaTranslate:\'businessrule\'}}\" field=\"entryvalue\"></advanced-search-field><advanced-search-field type=\"string\" label=\"{{\'parcelscount\'|gumgaTranslate:\'businessrule\'}}\" field=\"parcelscount\"></advanced-search-field><advanced-search-field type=\"string\" label=\"{{\'negotiationinterval\'|gumgaTranslate:\'businessrule\'}}\" field=\"negotiationinterval\"></advanced-search-field></gumga-query></div><div class=\"col-md-12 m-t\"><gumga-list data=\"businessrule.data\" configuration=\"conf\" class=\"table-striped gmd\" sort=\"businessrule.methods.sort(field, dir)\" page-size=\"businessrule.pageSize\" count=\"businessrule.count\" page-model=\"businessrule.page\" max-height=\"400px\" on-page-change=\"businessrule.methods.get(page, pageSize)\"></gumga-list></div></div></div></div></div></div></div>");}]);
/**
 * Created by augusto on 19/05/2015 13:41:06.
 */
angular.module('app.businessrule.services',['api.location']);
/**
 * Created by igorsantana on 19/05/2015 13:41:06.
 */
angular.module('app.stock.services',['api.location']);
angular.module('app.businessrule', ['ui.router', 'app.businessrule.controllers', 'app.businessrule.services', 'api.location'])
    .config(['$stateProvider', 'apiLocation', function ($stateProvider, apiLocation) {
        $stateProvider
            .state('businessrule.list', {
                url: '/list',
                templateUrl: 'modules/businessrule/views/list.html',
                controller: 'BusinessRuleListController',
                data: {id: 2}
            })
            .state('businessrule.insert', {
                url: '/insert',
                templateUrl: 'modules/businessrule/views/form.html',
                controller: 'BusinessRuleFormController',
                data: {id: 3}, resolve: {
                    entity: ['$stateParams', '$http', function ($stateParams, $http) {
                        var url = apiLocation + '/api/businessrule/new'
                        return $http.get(url);
                    }]
                    , operationTypes: ['OperationTypeService', function (OperationTypeService) {
                        return OperationTypeService.allWithTenancy().then(function (data) {
                            return data.data;
                        })
                    }]
                }
            })
            .state('businessrule.edit', {
                url: '/edit/:id',
                templateUrl: 'modules/businessrule/views/form.html',
                controller: 'BusinessRuleFormController',
                data: {id: 3}, resolve: {
                    entity: ['$stateParams', '$http', function ($stateParams, $http) {
                        var url = apiLocation + '/api/businessrule/' + $stateParams.id;
                        return $http.get(url);
                    }],
                    operationTypes: function () {
                        return [];
                    }
                }
            });
    }]);

angular.module('app.stock', ['ui.router', 'app.stock.controllers', 'app.stock.services'])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('stock.insert', {
                url: '/insert',
                templateUrl: 'modules/stock/views/form.html',
                controller: 'StockFormController',
                controllerAs: 'form',
                data: {id: 3},
                resolve: {
                    entity: function () {
                        return {};
                    }
                }
            })
    }]);

angular.module('app.businessrule.controllers', ['app.businessrule.services','ui.router', 'paymenttype.core']);

angular.module('app.stock.controllers', ['app.stock.services', 'ui.router']);
angular.module('operationtype.core', [
    'ui.router'
    , 'ngSanitize'
    , 'gumga.core'
    , 'brasil.filters'
    , 'ui.utils.masks'
    , 'datePicker'
    , 'app.stock'
    , 'app.businessrule'
    , 'operationtype.templates'
    , 'paymenttype.core'
    , 'characteristic.core'
    //FIMINJECTIONS
])
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('stock', {
                data: {
                    id: 1
                },
                url: '/stock',
                templateUrl: 'baseOperationType.html'
            })
            .state('businessrule', {
                data: {
                    id: 1
                },
                url: '/businessrule',
                templateUrl: 'baseOperationType.html'
            })
    }]);
angular.module('app.stock.services')
    .service('OperationTypeService', ['GumgaRest', 'apiLocation', '$q', function (GumgaRest, apiLocation, $q) {
        var service = new GumgaRest(apiLocation.concat('/api/operationtype'));

        service.recoverByCategory = function (name) {
            return service.extend('get', '/recover-by-category?category='.concat(name));
        };

        service.saveAll = function (entities) {
            var promises = entities.map(service.update);
            return $q.all(promises);
        };

        service.all = function () {
            return service.extend('get', '/all');
        };

        service.allWithTenancy = function () {
            return service.extend('get', '/getallwithtenancy');
        };

        service.recoveryAllByCategory = function (name) {
            return service.extend('get', '/recoveryallbycategory?category=' + name);
        };

        service.recoveryOperationCategoryDto = function () {
            return service.extend('get', '/recoveryoperationcategory');
        };

        service.addBusinessRules = function (operationId, businessRules) {
            return service.extend('post', '/addbusinessrules/'.concat(operationId), businessRules);
        };

        return service;
    }]);
angular.module('app.stock.services')
    .service('StockService', ['GumgaRest', 'apiLocation', '$q', function (GumgaRest, apiLocation, $q) {
        var service = new GumgaRest(apiLocation.concat('/api/operation'));

        service.saveTree = function (entity) {
            var promises = entity.map(saveNode);
            return $q.all(promises);
        };

        function saveNode(data) {
            return service.extend('post', '/tree/save', data);
        }

        service.getTree = function () {
            return service.extend('get', '/tree');
        };

        service.getChildrens = function (id, type) {
            return service.extend('get', '/tree/childrens/'.concat(type).concat('/').concat(id));
        };

        return service;
    }]);

angular.module('app.businessrule.services')
    .service('BusinessRuleService', ['GumgaRest', 'apiLocation', '$q', '$http', function (GumgaRest, apiLocation, $q, $http) {
        var service = new GumgaRest(apiLocation + '/api/businessrule');


        service.update = function (entity) {
            var identifier = entity.identifier;
            delete entity.identifier;
            // if (entity.id) {
            //     return $http.post(this._url, entity).then(function (data) {
            //         data.identifier = identifier;
            //         return data;
            //     });
            // }
            return service.save(entity).then(function (data) {
                data.identifier = identifier;
                return data;
            });
        };

        service.saveEntityRule = function (entity) {
            var promises = entity.map(service.update);
            return $q.all(promises);
        };

        service.getOperatorType = function () {
            return service.extend('get', '/operatorType');
        };

        service.getValueType = function () {
            return service.extend('get', '/valueType');
        };

        service.changeStatus = function (id) {
            return service.extend('get', '/changestatus/'.concat(id));
        };

        return service;
    }]);

angular.module('app.businessrule.controllers')
    .controller('BusinessRuleFormController', [
        '$state',
        'entity',
        '$scope',
        'BusinessRuleService',
        'PaymentTypeService',
        'operationTypes',
        'OperationTypeService', function ($state,
                                          entity,
                                          $scope,
                                          BusinessRuleService,
                                          PaymentTypeService,
                                          operationTypes,
                                          OperationTypeService) {
            var identifier = 0;
            BusinessRuleService.resetDefaultState();
            PaymentTypeService.resetDefaultState();
            $scope.entity = angular.copy(entity.data);
            $scope.continue = {};
            $scope.rules = [];
            $scope.combinations = [];
            $scope.content = {};
            $scope.page = 1;
            $scope.entity.discount = $scope.entity.discount || 0;
            $scope.entity.discountType = $scope.entity.discountType || '';
            $scope.entity.entryType = $scope.entity.entryType || '';
            $scope.entity.entryValue = $scope.entity.entryValue || 0;
            $scope.entity.entryPaymentTypes = $scope.entity.entryPaymentTypes || [];
            $scope.entity.parcelsPaymentTypes = $scope.entity.parcelsPaymentTypes || [];
            $scope.entity.hasEntry = $scope.entity.hasEntry || {value: false};
            $scope.entity.operationOwner = $scope.entity.operationOwner || '';
            $scope.operationTypes = operationTypes;
            $scope.entity.recurrence = $scope.entity.recurrence || {value: true};
            $scope.atualDate = new Date();
            $scope.entity.startDuraction = new Date();
            $scope.entity.value = 0;

            var initializeEntity = function () {
                $scope.entity.discount = 0;
                $scope.entity.hasEntry = {value: false};
                $scope.entity.entryValue = 0;
                $scope.entity.parcelsCount = 0;
                $scope.entity.negotiationInterval = 0;
                $scope.entity.value = 0;
                $scope.entity.startDuraction = new Date();
                $scope.entity.endDuraction = null;
                $scope.entity.operatorType = null;
                $scope.entity.entryType = 'VALUE';
                $scope.entity.discountType = 'VALUE';
                $scope.clickedBtnBlue = false;
                $scope.clickedBtnGreen = false;
                $scope.entity.operationOwner = [];
                $scope.entity.entryPaymentTypes = [];
                $scope.entity.parcelsPaymentTypes = [];
                $scope.entity.recurrence = {value: true};
            };

            if ($scope.entity.entryType === 'PERCENTAGE' && $scope.entity.entryValue === 1) {
                $scope.clickedBtnGreen = true;
            } else {
                $scope.entity.id ? $scope.clickedBtnBlue = true : angular.noop;
            }

            $scope.get = function (page, size) {
                return PaymentTypeService.get(page, size).then(function (data) {
                    return data.data.values;
                })
            };

            $scope.checkDate = function (inputId) {
                if ((typeof $scope.entity[inputId]) == 'undefined') {
                    var a = document.getElementById(inputId).value,
                        data = a.split('/').map(function (data) {
                            return parseInt(data);
                        }),
                        isValid = data.filter(function (data) {
                                return typeof data == 'number';
                            }).length === 3;
                    if (isValid) {
                        $scope.entity[inputId] = new Date(data[2], data[1] - 1, data[0]);
                    }
                    if ((typeof $scope.entity[inputId]) == 'undefined') {
                        document.getElementById(inputId).value = null;
                    }
                }
            };

            $scope.minimumParcelsCount = function () {
                if ($scope.entity.parcelsCount < 0) {
                    $scope.entity.parcelsCount = 0;
                }
            };

            $scope.minimumNegotiationInterval = function () {
                if ($scope.entity.negotiationInterval < 0) {
                    $scope.entity.negotiationInterval = 0;
                }
            };

            $scope.conf = {
                columns: 'association,whenthevalueis,entryValue,discount,parcelsCount,negotiationInterval,start,end,button',
                selection: 'single',
                columnsConfig: [
                    {
                        name: 'association',
                        size: 'col-md-2',
                        title: '<strong gumga-translate-tag="businessrule.movementtype">Movement type</strong>',
                        content: '{{$value.operationOwner.name}}'
                    },
                    {
                        name: 'whenthevalueis',
                        size: 'col-md-2',
                        title: '<strong gumga-translate-tag="businessrule.whenthevalueis">When the value is</strong>',
                        content: '<div ng-show="$value.value > 0">{{$value.operatorType}}: {{$value.value | currency:\'R$\'}}</div>'
                        + '<div ng-hide="$value.value > 0"><span gumga-translate-tag="label.all">All</span></div>'
                    },
                    {
                        name: 'entryValue',
                        size: 'col-md-1',
                        title: '<strong gumga-translate-tag="businessrule.entryvalue">Entry value</strong>',
                        content: '<div ng-show="$value.entryType == \'PERCENTAGE\' ">{{$value.entryValue * 100}}%</div>' +
                        '<div ng-show="$value.entryType == \'VALUE\' ">{{$value.entryValue | currency:\'R$\'}}</div>'
                    },
                    {
                        name: 'discount',
                        size: 'col-md-1',
                        title: '<strong gumga-translate-tag="businessrule.maxdiscount">Max discount</strong>',
                        content: '<div ng-show="$value.discountType == \'PERCENTAGE\' ">{{$value.discount * 100}}%</div>' +
                        '<div ng-show="$value.discountType == \'VALUE\' ">{{$value.discount | currency:\'R$\'}}</div>'
                    },
                    {
                        name: 'parcelsCount',
                        size: 'col-md-1',
                        title: '<strong gumga-translate-tag="businessrule.parcelscount">Parcels count</strong>',
                        content: '<div>{{$value.parcelsCount}}</div>'
                    },
                    {
                        name: 'negotiationInterval',
                        size: 'col-md-2',
                        title: '<strong gumga-translate-tag="businessrule.installmentsinterval">Installments interval</strong>',
                        content: '<div ng-show="$value.negotiationInterval > 1">{{$value.negotiationInterval}} dias</div>' +
                        '<div ng-show="$value.negotiationInterval == 1">{{$value.negotiationInterval}} dia</div>' +
                        '<div ng-show="$value.negotiationInterval == 0">----------</div>'
                    },
                    {
                        name: 'start',
                        size: 'col-md-1',
                        title: '<strong gumga-translate-tag="businessrule.start">Start</strong>',
                        content: '<div>{{$value.startDuraction | date: \'dd/MM/yyyy\'}}</div>'
                    },
                    {
                        name: 'end',
                        size: 'col-md-1',
                        title: '<strong gumga-translate-tag="businessrule.end">End</strong>',
                        content: '<div>{{$value.endDuraction | date: \'dd/MM/yyyy\'}}</div>'
                    },
                    {
                        name: 'button',
                        title: ' ',
                        size: 'col-md-1',
                        content: '<button type="button" class="btn btn-danger btn-xs pull-right button-delete" ng-click="$parent.$parent.removeRule($index)"><span class="glyphicon glyphicon-remove"></span></button>'
                    }
                ]
            };


            $scope.addRules = function (entity) {
                var obj = angular.copy(entity);
                obj.hasEntry = {value: obj.entryValue != null && obj.entryValue !== 0};
                obj.identifier = identifier++;
                delete obj.operationOwner;
                entity.operationOwner.map(function (data) {
                    obj.operationOwner = data;
                    return angular.copy(obj);
                }).forEach(function (data) {
                    $scope.rules.push(data);
                });
                $scope.combinations.push(obj);
                initializeEntity();
            };

            $scope.removeRule = function (index) {
                if ($scope.rules) {
                    $scope.rules.splice(index, 1);
                }
            };

            $scope.update = function (entity) {
                var rules = angular.copy(entity)
                    , arrAux = []
                    , arrMT = {};
                rules = rules.filter(function (data) {

                    var toReturn = !arrAux[data.identifier];
                    arrMT[data.identifier] = arrMT[data.identifier] || [];
                    arrMT[data.identifier].push(data.operationOwner);
                    arrAux[data.identifier] = true;
                    return toReturn;
                }).map(function (data) {
                    data.id = data.id ? data.id : null;
                    if (data.operatorType === ' ') {
                        data.operatorType = null;
                    }
                    delete data.operationOwner;
                    return data;
                });
                BusinessRuleService.saveEntityRule(rules)
                    .then(function (brs) {
                        var arrOpt = {}
                        brs.forEach(function (br) {
                            arrMT[br.identifier].forEach(function (opt) {
                                arrOpt[opt.id] = arrOpt[opt.id] || [];
                                arrOpt[opt.id].push(br.data.data.id);
                            });
                        });
                        for (var opt in arrOpt) {
                            OperationTypeService.addBusinessRules(opt, arrOpt[opt]);
                        }
                        $state.go('businessrule.list');
                    });
            };

            $scope.saveOnEdit = function (entity) {
                BusinessRuleService.update(entity).then(function () {
                    if (!$scope.continue.insert) {
                        $state.go('businessrule.list');
                    } else {
                        $scope.entity = angular.copy(entity.data);
                    }
                })
            };

            BusinessRuleService.getOperatorType().success(function (data) {
                $scope.operators = data;
            });

            BusinessRuleService.getValueType().success(function (data) {
                $scope.valueTypes = data;
            });

            $scope.blockBtnAdd = function () {
                if ($scope.clickedBtnBlue) {
                    return $scope.entity.operationOwner.length === 0
                        || !$scope.entity.startDuraction
                        || $scope.entity.parcelsCount === 0
                        || ($scope.entity.entryValue > 0 && $scope.entity.entryPaymentTypes.length === 0)
                        || ($scope.entity.entryValue === 0 && $scope.entity.entryPaymentTypes.length > 0)
                        || $scope.entity.parcelsPaymentTypes.length === 0
                        || ($scope.entity.recurrence.value === false && $scope.entity.negotiationInterval === 0);
                } else {
                    if ($scope.entity.operationOwner.length <= 0 || !$scope.entity.startDuraction || $scope.entity.entryPaymentTypes.length <= 0) {
                        return true;
                    }
                }
            };

            $scope.$watch('entity.discount', function () {
                if ($scope.entity.discountType === 'PERCENTAGE' && $scope.entity.discount > 1) {
                    $scope.entity.discount = 1;
                }
            });

            $scope.$watch('entity.discountType', function () {
                if ($scope.entity.discountType && !$scope.entity.id) {
                    $scope.entity.discount = 0;
                }
            });

            $scope.$watch('entity.entryValue', function () {
                if ($scope.entity.entryType === 'PERCENTAGE' && !$scope.entity.id
                    && $scope.clickedBtnBlue && $scope.entity.entryValue > 0.99) {
                    $scope.entity.entryValue = 0.99;
                }
            });

            $scope.$watch('entity.entryType', function () {
                if ($scope.clickedBtnBlue && $scope.entity.entryType) {
                    $scope.entity.entryValue = 0
                }
            });

            $scope.$watch('clickedBtnGreen', function () {
                if ($scope.clickedBtnGreen && !$scope.entity.id) {
                    $scope.entity.entryType = 'PERCENTAGE';
                    $scope.entity.entryValue = 1;
                }
            });

            $scope.$watch('entity.recurrence.value', function () {
                if ($scope.entity.recurrence.value === true) {
                    $scope.entity.negotiationInterval = 0;
                }
            });

            $scope.hideInstallment = function () {
                if ($scope.clickedBtnGreen) {
                    return true;
                }
            };

            $scope.disabledNegotiationInterval = function () {
                if ($scope.entity.recurrence.value === true) {
                    return true;
                }
            };

            $scope.changeTerm = function () {
                if ($scope.entity.entryType === 'PERCENTAGE' && $scope.entity.entryValue === 1) {
                    $scope.entity.entryValue = 0.99;
                }
            };

            $scope.changeStartDate = function (value) {
                if ((value && $scope.entity.endDuraction && value > $scope.entity.endDuraction) || !value) {
                    $scope.entity.endDuraction = "";
                }
            };

            $scope.changeEndDate = function (value) {
                var startDate = $scope.entity.startDuraction;
                if (typeof startDate === 'string') {
                    startDate = new Date(startDate);
                }
                if ((startDate && value && startDate > value) || !startDate) {
                    $scope.entity.endDuraction = "";
                }
            };

            $scope.configStartDate = {
                change: function (data) {
                    $scope.changeStartDate(data);
                }
            };

            $scope.configEndDate = {
                change: function (data) {
                    data = new Date(data);
                    $scope.changeEndDate(data);
                }
            };

        }
    ]);

angular.module('app.businessrule.controllers')
    .controller('BusinessRuleListController', [
        '$scope',
        'gumgaController',
        'BusinessRuleService',
        '$rootScope',
        function ($scope,
                  gumgaController,
                  BusinessRuleService,
                  $rootScope) {
            gumgaController.createRestMethods($scope, BusinessRuleService, 'businessrule');
            $scope.businessrule.execute('reset');
            $scope.businessrule.execute('get');

            $scope.businessrule.on('deleteSuccess', function () {
                $scope.businessrule.execute('get');
            });

            $scope.conf = {
                columns: 'valueRestriction,entryValue,discount,parcelsCount,start,end,status,button',
                selection: 'none',
                checkbox: false,
                materialTheme: true,
                itemsPerPage: [5, 10, 25, 50, 100],
                title:'Listagem de Regras comerciais',
                columnsConfig: [
                    {
                        name: 'discount',
                        size: 'col-md-1',
                        title: '<strong gumga-translate-tag="businessrule.maximumdiscount">Maximum discount</strong>',
                        content: '<div ng-show="$value.discountType == \'PERCENTAGE\' ">{{$value.discount * 100}}%</div>' +
                        '<div ng-show="$value.discountType == \'VALUE\' ">{{$value.discount | currency:\'R$\'}}</div>'
                    }, {
                        name: 'valueRestriction',
                        size: 'col-md-1',
                        title: '<strong gumga-translate-tag="businessrule.valuerestriction">When the value go</strong>',
                        content: '<div ng-show="$value.value > 0">{{$parent.$parent.format[$value.operatorType]}}: {{$value.value | currency:\'R$\'}}</div>'
                        + '<div ng-hide="$value.value > 0"><span gumga-translate-tag="label.all">For All</span></div>'
                    },
                    {
                        name: 'entryValue',
                        size: 'col-md-1',
                        title: '<strong gumga-translate-tag="businessrule.entryvalue">Entry value</strong>',
                        content: '<div ng-show="$value.entryType == \'PERCENTAGE\' ">{{$value.entryValue * 100}}%</div>' +
                        '<div ng-show="$value.entryType == \'VALUE\' ">{{$value.entryValue | currency:\'R$\'}}</div>'
                    },
                    {
                        name: 'parcelsCount',
                        size: 'col-md-1',
                        title: '<strong gumga-translate-tag="businessrule.parcelscount">Parcels count</strong>',
                        content: '<div ng-show="$value.parcelsCount > 1">{{$value.parcelsCount}} vezes</div>' +
                        '<div ng-show="$value.parcelsCount == 1">{{$value.parcelsCount}} vez</div>' +
                        '<div ng-show="$value.parcelsCount == 0">----------</div>'
                    },
                    {
                        name: 'negotiationInterval',
                        size: 'col-md-1',
                        title: '<strong gumga-translate-tag="businessrule.negotiationinterval">Negotiation interval</strong>',
                        content: '<div ng-show="$value.negotiationInterval > 1">{{$value.negotiationInterval}} dias</div>' +
                        '<div ng-show="$value.negotiationInterval == 1">{{$value.negotiationInterval}} dia</div>' +
                        '<div ng-show="$value.negotiationInterval == 0">----------</div>'
                    },
                    {
                        name: 'start',
                        size: 'col-md-1',
                        title: '<strong gumga-translate-tag="businessrule.start">Start</strong>',
                        content: '{{$value.startDuraction | date:\'dd/MM/yyyy\'}}'
                    },
                    {
                        name: 'end',
                        size: 'col-md-1',
                        title: '<strong gumga-translate-tag="businessrule.end">End</strong>',
                        content: '{{$value.endDuraction | date:\'dd/MM/yyyy\'}}'
                    },
                    {
                        name: 'status',
                        size: 'col-md-1',
                        title: '<div align="center"><strong gumga-translate-tag="businessrule.status">status</strong></div>',
                        content: '<div align="center">' +
                        '<span class="badge badge-primary" ng-show="$value.active"  gumga-translate-tag="businessrule.active">Ativo</span>' +
                        '<span class="badge badge-danger"  ng-show="!$value.active" gumga-translate-tag="businessrule.inative" >Inativo</span> ' +
                        '</div>'
                    },
                    {
                        name: 'button',
                        title: ' ',
                        size: 'col-md-1',
                        content: '<div align="center">' +
                        '<button ng-show="$value.active" type="button" ng-click="$parent.$parent.changeStatus($value)" class="btn-link center-block text-danger" uib-tooltip="Desativar"><i class="fa fa-times"></i></button>' +
                        '<button ng-show="!$value.active" type="button" ng-click="$parent.$parent.changeStatus($value)" class="btn-link center-block text-success" uib-tooltip="Ativar"><i class="fa fa-check"></i></button>' +
                        '</div>'
                    }
                ]
            };

            $scope.changeStatus = function (entity) {
                $rootScope.$broadcast('hideNextMessage', true);
                BusinessRuleService.changeStatus(entity.id).then(function (response) {
                    $scope.businessrule.execute('get');
                });
            };

            function update(values) {
                $scope.content = values.data;
            }

            $scope.format = {};
            $scope.format['IGUAL_A'] = 'Igual a';
            $scope.format['MAIOR_QUE'] = 'Maior que';
            $scope.format['MAIOR_OU_IGUAL_QUE'] = 'Maior ou igual a';
        }
    ]);
angular.module('app.stock.controllers')
    .controller('StockFormController', [
        'StockService',
        'entity',
        '$scope',
        'NotesQueryService',
        'OperationTypeService',
        '$q', function (StockService,
                        entity,
                        $scope,
                        NotesQueryService,
                        OperationTypeService,
                        $q) {
            StockService.resetDefaultState();
            $scope.entity = angular.copy(entity.data);
            $scope.continue = {};
            $scope.atributos = [];
            $scope.status = {isProdutoOpen: true};
            $scope.array = [];
            $scope.list = [];
            $scope.treePattern = ['OPERATION', 'OPERATION', 'OPERATIONTYPE'];

            var prom = null;

            StockService.getTree().then(function (data) {
                $scope.list = data.data.data;
            });

            $scope.getChildrens = function (id, type) {
                return StockService.getChildrens(id, type);
            };

            var translateEntity = function (data) {
                var aux = {};
                aux.id = data.id;
                aux.version = data.version;
                aux.name = data.name;
                aux.characteristicsPT = data.characteristicsPT;
                aux.characteristics = data.characteristics;
                aux.description = data.description;
                aux.informative = data.informative;
                aux.stockType = data.stockType;
                aux.father = data.father;
                aux.fixedCharacteristics = data.fixedCharacteristics;
                aux.operationCategory = data.operationCategory;
                aux.invoiceObjective = data.invoiceObjective;
                aux.message = data.message;
                aux.editable = data.stockType === 'OPERATIONTYPE';
                data.childrens = data.childrens || [];
                aux.childrens = data.childrens.map(translateEntity);
                aux.integrationId = data.integrationId;
                if (aux.stockType === $scope.treePattern[2]) {
                    aux.informative = false;
                }
                return aux;
            };

            $scope.update = function (entity) {
                var aux = entity.map(translateEntity);
                StockService.saveTree(aux)
                    .then(function () {
                        StockService.getTree().then(function (data) {
                            $scope.list = data.data.data;
                        });
                    });
            };

            $scope.editOperation = function (data) {
                $scope.typeAux = data.stockType;
                $scope.objAux = data;
                prom = $q.defer();
                return prom.promise;
            };


            $scope.removable = function (data) {
                return data.stockType === 'OPERATIONTYPE'
            };

            $scope.addNew = function (obj, type) {
                if (prom) {
                    prom.resolve(obj);
                    prom = null;
                    $scope.typeAux = '';
                } else {
                    obj.childrens = [];
                    obj.characteristics = [];
                    obj.characteristicsPT = [];
                    var aux = angular.copy(obj);
                    aux.stockType = type;
                    $scope.array.push(aux);
                }
                return {};
            };

            $scope.deleteItem = function (type, index) {
                if (type === 'CATEGORY') {
                    $scope.arrayCategory.splice(index, 1);
                } else {
                    $scope.arrayType.splice(index, 1);
                }
            };

            $scope.createObject = function () {
                $scope.objAux = {
                    name: '',
                    invoiceObjective: '',
                    operationCategory: '',
                    message: '',
                    fixedCharacteristics: {
                        allowFreight: true,
                        allowStockMovement: true,
                        allowCashMovement: true,
                        allowNFe: true,
                        allowNFCe: true,
                        quickSale: true
                    }
                }
            };

            $scope.deleteFunctions = [];
            $scope.deleteFunctions[2] = function (data) {
                return OperationTypeService.deleteCollection([data]);
            };


            NotesQueryService.getDocumentFinality().then(function (data) {
                $scope.documentFinalityList = data.data;
            });

            OperationTypeService.recoveryOperationCategoryDto().then(function (data) {
                $scope.operationCategoryList = data.data;
            });
        }
    ]);